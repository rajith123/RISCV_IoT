package core
import chisel3.iotesters.{PeekPokeTester, Driver, ChiselFlatSpec}

class alu_rs1_muxTests(c: alu_rs1_mux) extends PeekPokeTester(c) {
  for (s0 <- 0 until 2) {
    for (s1 <- 0 until 2) {
	      val i0 = rnd.nextInt(32)
	      val i1 = rnd.nextInt(32)
	      val i2 = rnd.nextInt(32)
	      val i3 = rnd.nextInt(32)
              poke(c.io.rs1_mux_sel, s1 << 1 | s0)
              poke(c.io.rs1, i0)
              poke(c.io.imm_u, i1)
              poke(c.io.imm_z, i2)
              step(1)
              val out = if(s1 == 1) {
                          if (s0 == 1) i3 else i2
                        } else {
                          if (s0 == 1) i1 else i0 
                        }
              expect(c.io.to_alu_a, out)
    }
  }
}

class alu_rs1_muxTester extends ChiselFlatSpec {
  behavior of "alu_rs1_mux"
  backends foreach {backend =>    it should s"correctly add randomly generated numbers $backend" in {
      Driver(() => new alu_rs1_mux())(c => new alu_rs1_muxTests(c)) should be (true)
    }
  }
}
